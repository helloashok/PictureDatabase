#pragma checksum "C:\Users\User\source\repos\PictureDatabase\PictureDatabase\Views\Event\InsertEvent.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "852e353dae5284c2d013de2c1982598c8d34c645"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Event_InsertEvent), @"mvc.1.0.view", @"/Views/Event/InsertEvent.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Event/InsertEvent.cshtml", typeof(AspNetCore.Views_Event_InsertEvent))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\User\source\repos\PictureDatabase\PictureDatabase\Views\_ViewImports.cshtml"
using PictureDatabase;

#line default
#line hidden
#line 2 "C:\Users\User\source\repos\PictureDatabase\PictureDatabase\Views\_ViewImports.cshtml"
using PictureDatabase.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"852e353dae5284c2d013de2c1982598c8d34c645", @"/Views/Event/InsertEvent.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c37299be4461bc76a0eff10d41ee59873908e392", @"/Views/_ViewImports.cshtml")]
    public class Views_Event_InsertEvent : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\User\source\repos\PictureDatabase\PictureDatabase\Views\Event\InsertEvent.cshtml"
  
    ViewData["Title"] = "InsertEvent";

#line default
#line hidden
            BeginContext(49, 2440, true);
            WriteLiteral(@"

<h2>InsertEvent</h2>

<script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js""></script>


    EventName:<br>
<input type=""text"" id=""EventName""><br>
    EventStartDate:<br>
<input type=""datetime"" id=""EventStartDate""><br>
  EventEndDate:<br>
<input type=""datetime"" id=""EventEndDate""><br>
    EventPhoto:<br>
<input type=""file"" id=""myfile"" /><br>

<input type=""button"" id=""Save"" value=""Save Data"" />
<script>

    var ObjectEvent = {

        EventName: '',
        EventPhoto:'',
        EventStartDate: '',
        EventEndDate: '',
        EventExtension:''



    };

    function getBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }

    $(document).ready(function () {

        $(""#myfile"").on('change', function () {
     ");
            WriteLiteral(@"       var file = document.querySelector('input[type=""file""]').files[0];
            //    console.log($(this).val());



            // var file = document.querySelector('#myfile > input[type=""file""]').files[0];
            getBase64(file).then(
                
                function (data) {

                    ObjectEvent.EventExtension = file.type
                   
                        ObjectEvent.EventPhoto = data
                 

                }




            );
        });
    });




    $(document).ready(function () {
        $(""#Save"").click(function () {

            ObjectEvent.EventName = $('#EventName').val();
            ObjectEvent.EventStartDate = $('#EventStartDate').val();
            ObjectEvent.EventEndDate = $('#EventEndDate').val();


            $.ajax({
                url: '/Event/Create',
                type: 'POST',
                data: ObjectEvent,
                beforeSend: function (xhr) {

                    xhr.setReq");
            WriteLiteral(@"uestHeader(""Authorization"", 'Bearer ' + localStorage.getItem('token'));
                },
                success: function (data, textStatus, xhr) {
                    console.log(data);
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log(xhr);
                }
            });
        });
    });
</script>


");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
